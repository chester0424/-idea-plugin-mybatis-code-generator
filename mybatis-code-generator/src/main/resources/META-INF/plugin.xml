<!-- Plugin Configuration File. Read more: https://plugins.jetbrains.com/docs/intellij/plugin-configuration-file.html -->
<idea-plugin>
    <!-- Unique identifier of the plugin. It should be FQN. It cannot be changed between the plugin versions. -->
    <id>zone.pusu.mybatis-code-generator</id>

    <!-- Public plugin name should be written in Title Case.
         Guidelines: https://plugins.jetbrains.com/docs/marketplace/plugin-overview-page.html#plugin-name -->
    <name>Mybatis Forward CodeGenerator</name>

    <!-- A displayed Vendor name or Organization ID displayed on the Plugins Page. -->
    <vendor email="373934650@qq.com" url="https://gitee.com/chesterone/idea-plugin-mybatis-code-generator">Mybatis
        Forward CodeGenerator
    </vendor>

    <!-- Description of the plugin displayed on the Plugin Page and IDE Plugin Manager.
         Simple HTML elements (text formatting, paragraphs, and lists) can be added inside of <![CDATA[ ]]> tag.
         Guidelines: https://plugins.jetbrains.com/docs/marketplace/plugin-overview-page.html#plugin-description -->
    <description><![CDATA[
        <p>Generate mybatis necessary files based on the current java class code.</p></br>
        <p>In the use of Java projects, it is common to use Mybatis to do ORM. Most of them are reverse engineering methods, which generate code according to the database structure. This method is also convenient to use and efficient for development.</p>
        <p> The Mybatis Forward CodeGenerator plug-in uses the forward engineering idea to generate code through some simple operations according to the classes written.</p>
        <p> To some extent, it may be more suitable for the construction ideas such as object-oriented and domain-driven design.</p></br>
        <p> For instructions, see <a href="https://gitee.com/chesterone/idea-plugin-mybatis-code-generator">gitee</></p>
  ]]></description>

    <!-- Product and plugin compatibility requirements.
         Read more: https://plugins.jetbrains.com/docs/intellij/plugin-compatibility.html -->
    <depends>com.intellij.modules.platform</depends>

    <!--    added depend custom start-->
    <depends>com.intellij.modules.lang</depends>
    <depends>com.intellij.modules.java-capable</depends>
    <depends>com.intellij.modules.java</depends>
    <!--    added depend custom end-->

    <!-- Extension points defined by the plugin.
         Read more: https://plugins.jetbrains.com/docs/intellij/plugin-extension-points.html -->
    <extensions defaultExtensionNs="com.intellij">
        <applicationService serviceImplementation="zone.pusu.mybatisCodeGenerator.setting.SettingMainStoreService"/>
        <applicationService serviceImplementation="zone.pusu.mybatisCodeGenerator.setting.SettingTemplateStoreService"/>
        <applicationService
                serviceImplementation="zone.pusu.mybatisCodeGenerator.setting.SettingTypeMappingStoreService"/>
        <applicationService
                serviceImplementation="zone.pusu.mybatisCodeGenerator.setting.SettingExtendCfgColStoreService"/>
        <applicationConfigurable dynamic="true" instance="zone.pusu.mybatisCodeGenerator.ui.SettingMainUI"/>
    </extensions>
    <actions>
        <action id="GenerateMybatisAction" class="zone.pusu.mybatisCodeGenerator.action.GenerateMybatisAction"
                text="GenerateMybatis" description="生成Mybatis" icon="AllIcons.Actions.Lightning">
            <add-to-group group-id="EditorPopupMenu" anchor="last"/>
        </action>
    </actions>
</idea-plugin>